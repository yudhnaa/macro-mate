"""description of changes

Revision ID: a64c4524e3da
Revises: 
Create Date: 2025-10-23 15:44:10.261063

"""
from typing import Sequence, Union
import pgvector.sqlalchemy
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'a64c4524e3da'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute('CREATE EXTENSION IF NOT EXISTS vector')
    op.create_table('foods',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('raw_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('is_breakfast', sa.Boolean(), nullable=True),
    sa.Column('is_lunch', sa.Boolean(), nullable=True),
    sa.Column('is_dinner', sa.Boolean(), nullable=True),
    sa.Column('is_snack', sa.Boolean(), nullable=True),
    sa.Column('is_dessert', sa.Boolean(), nullable=True),
    sa.Column('needs_blender', sa.Boolean(), nullable=True),
    sa.Column('needs_oven', sa.Boolean(), nullable=True),
    sa.Column('needs_stove', sa.Boolean(), nullable=True),
    sa.Column('needs_slow_cooker', sa.Boolean(), nullable=True),
    sa.Column('needs_toaster', sa.Boolean(), nullable=True),
    sa.Column('needs_food_processor', sa.Boolean(), nullable=True),
    sa.Column('needs_microwave', sa.Boolean(), nullable=True),
    sa.Column('needs_grill', sa.Boolean(), nullable=True),
    sa.Column('complexity', sa.Integer(), nullable=True),
    sa.Column('cook_time', sa.String(length=50), nullable=True),
    sa.Column('prep_time', sa.String(length=50), nullable=True),
    sa.Column('wait_time', sa.String(length=50), nullable=True),
    sa.Column('total_time', sa.String(length=50), nullable=True),
    sa.Column('grams', sa.Float(), nullable=True),
    sa.Column('grams_per_unit', sa.Float(), nullable=True),
    sa.Column('default_unit', sa.String(length=50), nullable=True),
    sa.Column('unit_amount', sa.Float(), nullable=True),
    sa.Column('image_url', sa.Text(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_foods_id'), 'foods', ['id'], unique=False)
    op.create_index(op.f('ix_foods_name'), 'foods', ['name'], unique=False)
    op.create_index(op.f('ix_foods_raw_id'), 'foods', ['raw_id'], unique=False)
    op.create_table('nutrition_embeddings',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('ref_type', sa.String(length=50), nullable=False),
    sa.Column('ref_id', sa.Integer(), nullable=False),
    sa.Column('vector', pgvector.sqlalchemy.vector.VECTOR(dim=3072), nullable=True),
    sa.Column('extra_metadata', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_nutrition_embeddings_id'), 'nutrition_embeddings', ['id'], unique=False)
    op.create_index(op.f('ix_nutrition_embeddings_ref_id'), 'nutrition_embeddings', ['ref_id'], unique=False)
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('username', sa.String(length=100), nullable=False),
    sa.Column('hashed_password', sa.String(length=255), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('full_name', sa.String(length=255), nullable=True),
    sa.Column('age', sa.Integer(), nullable=True),
    sa.Column('gender', sa.String(length=20), nullable=True),
    sa.Column('weight', sa.Float(), nullable=True),
    sa.Column('height', sa.Float(), nullable=True),
    sa.Column('body_shape', sa.String(length=50), nullable=True),
    sa.Column('health_conditions', sa.Text(), nullable=True),
    sa.Column('fitness_goal', sa.String(length=255), nullable=True),
    sa.Column('dietary_restrictions', sa.Text(), nullable=True),
    sa.Column('allergies', sa.Text(), nullable=True),
    sa.Column('activity_level', sa.String(length=50), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_table('user_meals',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('meal_name', sa.String(length=255), nullable=True),
    sa.Column('meal_type', sa.Enum('BREAKFAST', 'LUNCH', 'DINNER', 'SNACK', name='meal_type_enum'), nullable=False),
    sa.Column('meal_time', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('image_url', sa.Text(), nullable=True),
    sa.Column('image_vector', pgvector.sqlalchemy.vector.VECTOR(dim=3072), nullable=True),
    sa.Column('analysis_status', sa.Enum('PENDING', 'SUCCESS', 'FAILED', name='analysis_status_enum'), nullable=False),
    sa.Column('total_calories', sa.Float(), nullable=True),
    sa.Column('total_protein', sa.Float(), nullable=True),
    sa.Column('total_fat', sa.Float(), nullable=True),
    sa.Column('total_carbs', sa.Float(), nullable=True),
    sa.Column('total_fiber', sa.Float(), nullable=True),
    sa.Column('total_sodium', sa.Float(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_user_meals_id'), 'user_meals', ['id'], unique=False)
    op.create_index(op.f('ix_user_meals_user_id'), 'user_meals', ['user_id'], unique=False)
    op.create_table('meal_items',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('meal_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=True),
    sa.Column('estimated_weight', sa.Float(), nullable=True),
    sa.Column('calories', sa.Float(), nullable=True),
    sa.Column('protein', sa.Float(), nullable=True),
    sa.Column('fat', sa.Float(), nullable=True),
    sa.Column('carbs', sa.Float(), nullable=True),
    sa.Column('fiber', sa.Float(), nullable=True),
    sa.Column('sodium', sa.Float(), nullable=True),
    sa.Column('nutrition_json', sa.JSON(), nullable=True),
    sa.Column('embedding_vector', pgvector.sqlalchemy.vector.VECTOR(dim=3072), nullable=True),
    sa.ForeignKeyConstraint(['meal_id'], ['user_meals.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_meal_items_id'), 'meal_items', ['id'], unique=False)
    op.create_index(op.f('ix_meal_items_meal_id'), 'meal_items', ['meal_id'], unique=False)
    op.create_table('nutrition_analysis_logs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('meal_id', sa.Integer(), nullable=True),
    sa.Column('model_name', sa.String(length=100), nullable=True),
    sa.Column('raw_response', sa.JSON(), nullable=True),
    sa.Column('confidence', sa.Float(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['meal_id'], ['user_meals.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_nutrition_analysis_logs_id'), 'nutrition_analysis_logs', ['id'], unique=False)
    op.create_index(op.f('ix_nutrition_analysis_logs_meal_id'), 'nutrition_analysis_logs', ['meal_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_nutrition_analysis_logs_meal_id'), table_name='nutrition_analysis_logs')
    op.drop_index(op.f('ix_nutrition_analysis_logs_id'), table_name='nutrition_analysis_logs')
    op.drop_table('nutrition_analysis_logs')
    op.drop_index(op.f('ix_meal_items_meal_id'), table_name='meal_items')
    op.drop_index(op.f('ix_meal_items_id'), table_name='meal_items')
    op.drop_table('meal_items')
    op.drop_index(op.f('ix_user_meals_user_id'), table_name='user_meals')
    op.drop_index(op.f('ix_user_meals_id'), table_name='user_meals')
    op.drop_table('user_meals')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    op.drop_index(op.f('ix_nutrition_embeddings_ref_id'), table_name='nutrition_embeddings')
    op.drop_index(op.f('ix_nutrition_embeddings_id'), table_name='nutrition_embeddings')
    op.drop_table('nutrition_embeddings')
    op.drop_index(op.f('ix_foods_raw_id'), table_name='foods')
    op.drop_index(op.f('ix_foods_name'), table_name='foods')
    op.drop_index(op.f('ix_foods_id'), table_name='foods')
    op.drop_table('foods')
    # ### end Alembic commands ###
